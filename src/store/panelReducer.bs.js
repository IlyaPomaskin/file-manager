// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var RList$Rationale = require("rationale/src/RList.js");
var Option$Rationale = require("rationale/src/Option.js");
var FsUtils$ReactTemplate = require("../utils/FsUtils.bs.js");

var Action = /* module */[];

function reducer(panel, action) {
  switch (action.tag | 0) {
    case 0 : 
        var relativePath = action[0];
        var nextFiles = FsUtils$ReactTemplate.getFilesList(Path.resolve(panel[/* path */1], relativePath));
        var nextFocusedItemIndex;
        if (relativePath === "..") {
          var currentDirectoryName = Path.basename(panel[/* path */1]);
          var idx = RList$Rationale.findIndex((function (info) {
                  return +(info[/* name */0] === currentDirectoryName);
                }), nextFiles);
          nextFocusedItemIndex = Option$Rationale.$$default(0, idx);
        } else {
          nextFocusedItemIndex = 0;
        }
        return /* record */[
                /* focusedItem */List.nth(nextFiles, nextFocusedItemIndex),
                /* path */Path.resolve(panel[/* path */1], relativePath),
                /* files */nextFiles,
                /* itemsPerColumn */panel[/* itemsPerColumn */3],
                /* selectedFiles : [] */0
              ];
    case 1 : 
        return /* record */[
                /* focusedItem */action[0],
                /* path */panel[/* path */1],
                /* files */panel[/* files */2],
                /* itemsPerColumn */panel[/* itemsPerColumn */3],
                /* selectedFiles */panel[/* selectedFiles */4]
              ];
    case 2 : 
        return /* record */[
                /* focusedItem */panel[/* focusedItem */0],
                /* path */panel[/* path */1],
                /* files */panel[/* files */2],
                /* itemsPerColumn */action[0],
                /* selectedFiles */panel[/* selectedFiles */4]
              ];
    case 3 : 
        var fromIndex = RList$Rationale.indexOf(panel[/* focusedItem */0], panel[/* files */2]);
        var toIndex = RList$Rationale.indexOf(action[0], panel[/* files */2]);
        var indeces = Caml_obj.caml_lessthan(fromIndex, toIndex) ? /* tuple */[
            fromIndex,
            toIndex
          ] : /* tuple */[
            toIndex,
            fromIndex
          ];
        var match = indeces[0];
        var selectedFiles;
        if (match) {
          var match$1 = indeces[1];
          if (match$1) {
            var fromIndex$1 = match[0];
            selectedFiles = RList$Rationale.concat(panel[/* selectedFiles */4], RList$Rationale.slice(fromIndex$1, match$1[0] - fromIndex$1 | 0, panel[/* files */2]));
          } else {
            selectedFiles = panel[/* selectedFiles */4];
          }
        } else {
          selectedFiles = panel[/* selectedFiles */4];
        }
        return /* record */[
                /* focusedItem */panel[/* focusedItem */0],
                /* path */panel[/* path */1],
                /* files */panel[/* files */2],
                /* itemsPerColumn */panel[/* itemsPerColumn */3],
                /* selectedFiles */selectedFiles
              ];
    
  }
}

exports.Action = Action;
exports.reducer = reducer;
/* path Not a pure module */
