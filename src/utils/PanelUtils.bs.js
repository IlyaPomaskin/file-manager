// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ElementRe = require("bs-webapi/src/dom/nodes/ElementRe.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var RList$Rationale = require("rationale/src/RList.js");
var Option$Rationale = require("rationale/src/Option.js");

function getItemHeight() {
  return 24;
}

function getPanelHeight(node) {
  return node.getBoundingClientRect().height;
}

function getColumnsCount(panelHeight) {
  return Caml_primitive.caml_int_max(panelHeight / 24 | 0, 1);
}

function scrollToNode(shouldScroll, panelRef, node) {
  if (shouldScroll !== 0) {
    if (panelRef) {
      if (node == null) {
        return /* () */0;
      } else {
        var panelNode = panelRef[0];
        var itemOffsetX1 = node.offsetLeft;
        var itemOffsetX2 = node.clientWidth + itemOffsetX1 | 0;
        var panelOffset = panelNode.offsetLeft;
        var panelScrollX1 = panelNode.scrollLeft + panelOffset | 0;
        var width = panelNode.clientWidth;
        var panelScrollX2 = (width + panelScrollX1 | 0) + 5 | 0;
        if (itemOffsetX1 !== panelScrollX1 && (itemOffsetX1 < panelScrollX1 || itemOffsetX2 > panelScrollX2)) {
          panelNode.scrollLeft = itemOffsetX1 - panelOffset | 0;
          return /* () */0;
        } else {
          return 0;
        }
      }
    } else {
      return /* () */0;
    }
  } else {
    return /* () */0;
  }
}

function getMaxColumnWidth(panelRef) {
  if (panelRef) {
    return List.fold_left((function (maxWidth, optNode) {
                  if (optNode) {
                    return Caml_primitive.caml_int_max(maxWidth, optNode[0].clientWidth);
                  } else {
                    return maxWidth;
                  }
                }), 100, List.filter(Option$Rationale.isSome)(List.map(ElementRe.ofNode, $$Array.to_list(Array.prototype.slice.call(panelRef[0].querySelectorAll(".panel-column"))))));
  } else {
    return 100;
  }
}

function getItemByOffset(panel, offsetType) {
  return Curry._2(Option$Rationale.$great$great$eq, Curry._2(Option$Rationale.$less$$great, Curry._2(Option$Rationale.$less$$great, RList$Rationale.indexOf(panel[/* focusedItem */0], panel[/* files */2]), (function (focusedItemIndex) {
                        switch (offsetType) {
                          case 0 : 
                              return focusedItemIndex - panel[/* itemsPerColumn */3] | 0;
                          case 1 : 
                              return focusedItemIndex + panel[/* itemsPerColumn */3] | 0;
                          case 2 : 
                              return focusedItemIndex - 1 | 0;
                          case 3 : 
                              return focusedItemIndex + 1 | 0;
                          
                        }
                      })), (function (targetIndex) {
                    var lastIndex = List.length(panel[/* files */2]) - 1 | 0;
                    if (targetIndex > lastIndex) {
                      if (lastIndex < targetIndex) {
                        return lastIndex;
                      } else {
                        return targetIndex;
                      }
                    } else if (0 > targetIndex) {
                      return 0;
                    } else {
                      return targetIndex;
                    }
                  })), (function (targetIndex) {
                return RList$Rationale.nth(targetIndex, panel[/* files */2]);
              }));
}

exports.getItemHeight = getItemHeight;
exports.getPanelHeight = getPanelHeight;
exports.getColumnsCount = getColumnsCount;
exports.scrollToNode = scrollToNode;
exports.getMaxColumnWidth = getMaxColumnWidth;
exports.getItemByOffset = getItemByOffset;
/* ElementRe Not a pure module */
