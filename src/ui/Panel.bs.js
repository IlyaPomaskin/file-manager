// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Cn = require("re-classnames/src/Cn.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var RList$Rationale = require("rationale/src/RList.js");
var PanelUtils$ReactTemplate = require("../utils/PanelUtils.bs.js");

var fileImage = "üìÑ";

var folderImage = "üìÅ";

function updatePanelHeight(self) {
  var match = self[/* state */2][/* panelRef */0][0];
  if (match) {
    var panelHeight = PanelUtils$ReactTemplate.getPanelHeight(match[0]);
    Curry._1(self[/* retainedProps */3][/* onItemsPerColumnChange */4], PanelUtils$ReactTemplate.getColumnsCount(panelHeight));
    return Curry._1(self[/* send */4], /* SetPanelHeight */Block.__(1, [panelHeight]));
  } else {
    return /* () */0;
  }
}

function updateColumnsWidth(self) {
  return Curry._1(self[/* send */4], /* SetPanelHeight */Block.__(1, [PanelUtils$ReactTemplate.getMaxColumnWidth(self[/* state */2][/* panelRef */0][0])]));
}

function resizeEventListener(_, self) {
  return updatePanelHeight(self);
}

function setPanelRef(node, self) {
  self[/* state */2][/* panelRef */0][0] = (node == null) ? /* None */0 : [node];
  return /* () */0;
}

function renderColumn(columnWidth, renderItem, index, columnItems) {
  return React.createElement("div", {
              key: Pervasives.string_of_int(index),
              className: "panel-column",
              style: {
                width: Pervasives.string_of_int(columnWidth) + "px"
              }
            }, $$Array.of_list(List.map(renderItem, columnItems)));
}

function renderColumnItems(panelRef, retainedProps, info) {
  var partial_arg = retainedProps[/* isFocused */1] && +(retainedProps[/* panel */0][/* focusedItem */0][/* name */0] === info[/* name */0]);
  var match = info[/* isFile */2];
  return React.createElement("div", {
              key: info[/* name */0],
              ref: (function (param) {
                  return PanelUtils$ReactTemplate.scrollToNode(partial_arg, panelRef, param);
                }),
              className: Cn.make(/* :: */[
                    "panel-item",
                    /* :: */[
                      Cn.ifBool(RList$Rationale.contains(info)(retainedProps[/* panel */0][/* selectedFiles */4]), "panel-item--selected"),
                      /* :: */[
                        Cn.ifBool(+(retainedProps[/* panel */0][/* focusedItem */0] === info), "panel-item--focused"),
                        /* :: */[
                          Cn.ifBool(+(retainedProps[/* panel */0][/* focusedItem */0] === info) && retainedProps[/* isFocused */1], "panel-item--active-focused"),
                          /* :: */[
                            Cn.ifBool(info[/* isFile */2], "u-color-brand-lighter"),
                            /* :: */[
                              Cn.ifBool(1 - info[/* isFile */2], "u-color-brand-darker"),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]),
              onClick: (function () {
                  return Curry._1(retainedProps[/* onFocusItem */3], info);
                }),
              onDoubleClick: (function () {
                  return Curry._1(retainedProps[/* onPathChange */2], info);
                })
            }, match !== 0 ? fileImage : folderImage, info[/* name */0]);
}

var component = ReasonReact.reducerComponentWithRetainedProps("Panel");

function make(panel, isFocused, onFocusItem, onPathChange, onClick, onItemsPerColumnChange, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              if (self[/* retainedProps */3][/* panel */0][/* files */2] !== panel[/* files */2]) {
                updatePanelHeight(self);
                updateColumnsWidth(self);
              }
              return self[/* state */2];
            }),
          /* didMount */(function (self) {
              updatePanelHeight(self);
              updateColumnsWidth(self);
              return /* NoUpdate */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var partial_arg = self[/* retainedProps */3];
              var partial_arg$1 = self[/* state */2][/* panelRef */0][0];
              var partial_arg$2 = function (param) {
                return renderColumnItems(partial_arg$1, partial_arg, param);
              };
              var partial_arg$3 = self[/* state */2][/* columnWidth */1];
              return React.createElement("div", {
                          ref: Curry._1(self[/* handle */0], setPanelRef),
                          className: "panel " + (
                            isFocused !== 0 ? "panel--focused" : ""
                          ),
                          onClick: onClick
                        }, $$Array.of_list(List.mapi((function (param, param$1) {
                                    return renderColumn(partial_arg$3, partial_arg$2, param, param$1);
                                  }), RList$Rationale.splitEvery(panel[/* itemsPerColumn */3], panel[/* files */2]))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* panelRef */[/* None */0],
                      /* columnWidth */100
                    ];
            }),
          /* retainedProps : record */[
            /* panel */panel,
            /* isFocused */isFocused,
            /* onPathChange */onPathChange,
            /* onFocusItem */onFocusItem,
            /* onItemsPerColumnChange */onItemsPerColumnChange
          ],
          /* reducer */(function (action, state) {
              if (action.tag) {
                return /* NoUpdate */0;
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* panelRef */state[/* panelRef */0],
                            /* columnWidth */action[0]
                          ]]);
              }
            }),
          /* subscriptions */(function (self) {
              return /* :: */[
                      /* Sub */[
                        (function () {
                            window.addEventListener("resize", Curry._1(self[/* handle */0], resizeEventListener));
                            return "resize";
                          }),
                        (function () {
                            window.removeEventListener("resize", Curry._1(self[/* handle */0], resizeEventListener));
                            return /* () */0;
                          })
                      ],
                      /* [] */0
                    ];
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.fileImage = fileImage;
exports.folderImage = folderImage;
exports.updatePanelHeight = updatePanelHeight;
exports.updateColumnsWidth = updateColumnsWidth;
exports.resizeEventListener = resizeEventListener;
exports.setPanelRef = setPanelRef;
exports.renderColumn = renderColumn;
exports.renderColumnItems = renderColumnItems;
exports.component = component;
exports.make = make;
/* component Not a pure module */
